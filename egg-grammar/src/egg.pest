//! Initial parser of source code.

/// Complete AST tree.
Document = _{ SOI ~ Block* ~ EOI }

/// Program block.
Block = { BlockHead ~ LineEnd ~ (Body ~ SingleWs*)? }

/// Head of a block.
BlockHead = { "(TODO)" }

/// Body of a block.
Body = _{
    FirstIndent ~ Block ~
    (SubsequentIndent ~ Block)* ~
    DropIndent
}

/// Indentation of non-first blocks.
SubsequentIndent = _{ PEEK[..] }

/// Indentation of first blocks.
FirstIndent = _{ PEEK[..] ~ PUSH(SingleIndent+) }

/// Drop indentation.
DropIndent = _{ DROP }

/// Character of an indentation.
SingleIndent = _{" " | "\t"}

/// The end of a line.
LineEnd = _{ SingleWs* ~ Newline | EOI }

/// Identifier to name types, variables, functions, etc.
Identifier = @{ NormalIdentifier | StringIdentifier }

/// Identifier without special characters.
NormalIdentifier = @{
    !(Keyword ~ (SingleWs+ | EOI)) ~
    ASCII_ALPHA ~ ("_" | "-" | ASCII_ALPHANUMERIC)* ~
    !NormalStringLiteral
}

/// Identifier that can contain any character.
StringIdentifier = @{ "id" ~ NormalStringLiteral }

/// Keyword to exclude from NormalIdentifier.
Keyword = @{
    | VisibilityKeyword
    | DeclarationKeyword
    | EscapeKeyword
    | LiteralKeyword
    | ImperativeKeyword
    | TypeKeyword
}

/// Keyword to define items' visibility.
VisibilityKeyword = @{
    | "pub"
}

/// Keyword to escape a block, a scope, a function, or a program.
EscapeKeyword = @{
    | "break"
    | "continue"
    | "exec"
    | "exit"
    | "return"
}

/// Keyword to declare a binding.
DeclarationKeyword = @{
    | "const"
    | "enum"
    | "fn"
    | "impl"
    | "let"
    | "struct"
    | "trait"
    | "type"
    | "union"
}

/// Keyword to define imperative structure.
ImperativeKeyword = @{
    | "do"
    | "else"
    | "for"
    | "if"
    | "loop"
    | "while"
}

/// Name of a primitive type.
TypeKeyword = @{
    | "any"
    | "never"
    | "void"
    | NumTypeKeyword
}

/// Name of a numeric type.
NumTypeKeyword = @{ IntTypeKeyword | FloatTypeKeyword }

/// Name of an integer type.
IntTypeKeyword = @{ ("u" | "i") ~ ("8" | "16" | "32" | "64" | "128") }

/// Name of a floating-point number type.
FloatTypeKeyword = @{ "f32" | "f64" }

/// Literal keyword to exclude from NormalIdentifier.
LiteralKeyword = @{
    | "true"
    | "false"
    | "null"
    | "inf"
    | "nan"
}

/// String literal.
StringLiteral = @{ NormalStringLiteral | RawStringLiteral }

/// String literal with escape sequences.
NormalStringLiteral = ${
    | ("\"" ~ (!"\"" ~ NormalCharacter)* ~ "\"")
    | ("'" ~ (!"'" ~ NormalCharacter)* ~ "'")
}

/// Characters to used in [`NormalStringLiteral`](Self::NormalStringLiteral).
NormalCharacter = @{
    | !"\\" ~ NonEscapedChar
    | "\\" ~ ("\"" | "'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ "x" ~ ASCII_HEX_DIGIT{2}
    | "\\" ~ "u" ~ ASCII_HEX_DIGIT{4}
    | "\\" ~ "u" ~ "{" ~ ASCII_HEX_DIGIT+ ~ "}"
}

/// String literal without escape sequences.
RawStringLiteral = @{ "r" ~ RawStringLiteralBody }

// Body of a raw string.
RawStringLiteralBody = @{
    | ("\"" ~ (!"\"" ~ NonEscapedChar)* ~ "\"")
    | ("'" ~ (!"'" ~ NonEscapedChar)* ~ "'")
}

/// Character to be in a [string literal](Self::StringLiteral) without escape syntax.
///
/// [Special ASCII characters](Self::SpecialAscii) are excluded because they wouldn't have been visible in source code.
NonEscapedChar = @{ !SpecialAscii ~ ANY }

/// Special ASCII characters, ranging from `NUL` up to `US` (right under the space character).
SpecialAscii = @{ '0'..'\x1F' }

/// Single whitespace.
SingleWs = { " " | "\t" | Newline }

/// New line sequences. Either `LF` or `CRLF`.
///
/// `LFCR` and `CR` are excluded according to specification.
Newline = @{
    | !"\n\r" ~ "\n"
    | "\r\n"
}
